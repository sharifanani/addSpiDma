=============================================================================
List of generated methods in project: k60_spi_dma

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "SPI1"      (component Init_SPI_VAR0)
   - SPI1_Init -This method initializes registers of the SPI module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "SpiBus2"   (component SPIMaster_LDD)
   - SpiBus2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - SpiBus2_Deinit -This method deinitializes the device. It switches off the device, frees the device data structure memory, 
                interrupts vectors, etc.
   - SpiBus2_Enable -This method enables SPI device. This method is intended to be used together with <Disable()> method to 
                temporary switch On/Off the device after the device is initialized. This method is required if the <Enabled in 
                init. code> property is set to "no" value.
   - SpiBus2_Disable -Disables the SPI device. When the device is disabled, some component methods should not be called. If so, 
                error ERR_DISABLED may be reported. This method is intended to be used together with <Enable()> method to 
                temporary switch on/off the device after the device is initialized. This method is not required. The <Deinit()> 
                method can be used to switch off and uninstall the device.
   - SpiBus2_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation. This method 
                finishes immediately after calling it - it doesn't wait the end of data transmission. Use event <OnBlockSent> 
                to check the end of data transmission or method GetSentDataNum to check the state of sending.
   - SpiBus2_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the specified 
                number of characters is received. The method <CancelBlockReception> can be used to cancel a running receive 
                operation. If a receive operation is not in progress (the method was not called or a previous operation has 
                already finished) all received characters will be lost without any notification. To prevent the loss of data 
                call the method immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> 
                event). This method finishes immediately after calling it - it doesn't wait the end of data reception. Use 
                event <OnBlockReceived> to check the end of data reception or method GetReceivedDataNum to check the state of 
                receiving.
   - SpiBus2_Main -This method is available only in the polling mode (Interrupt service/event = 'no'). If interrupt service is 
                disabled this method replaces the interrupt handler. This method should be called if Receive/SendBlock was 
                invoked before in order to run the reception/transmission. The end of the receiving/transmitting is indicated 
                by OnBlockSent or OnBlockReceived event.

Module "DmaTxCh"   (component DMAChannel_LDD)
   - DmaTxCh_Init -Initializes the DMAChannel_LDD component. This method allocates no memory. Memory for all DMA used channles 
                is allocated by DMAController componet .  This method can be called only once. Before the second call of Init() 
                the Deinit() must be called first.
   - DmaTxCh_Enable -Enables the DMAChannel_LDD component.
   - DmaTxCh_Disable -Disables the DMAChannel_LDD component.
   - DmaTxCh_EnableRequest -The method enables request from peripheral. Please note that this method doesn't start the transfer.
                The transfer is started as soon as DMA request from peripheral is asserted.
   - DmaTxCh_DisableRequest -The method disables DMA request from peripheral. Request can also by disabled automatically by the 
                DMA hardware if "<Disable request after transfer done>" property is set to "yes" value.
   - DmaTxCh_StartTransfer -The method starts DMA transfer on the selected DMA channel. This methods initiates explicit SW 
                transfer request. Please note that call of this method if peripheral request is enabled can cause unpredictable 
                behaviour.
   - DmaTxCh_GetError -Returns channel error flags and clears these flags.
   - DmaTxCh_SetSourceAddress -Sets source(read) transaction address.
   - DmaTxCh_SetDestinationAddress -Sets destination(write) transaction address.
   - DmaTxCh_SetTransactionCount -Sets number of R/W transaction performed after next request is asserted. Please note the this 
                value doesn't represent number of transferred bytes but number on R/W transaction units.
   - DmaTxCh_SetRequestCount -Sets number of requests required to complete transfer.

Module "DmaRxCh"   (component DMAChannel_LDD)
   - DmaRxCh_Init -Initializes the DMAChannel_LDD component. This method allocates no memory. Memory for all DMA used channles 
                is allocated by DMAController componet .  This method can be called only once. Before the second call of Init() 
                the Deinit() must be called first.
   - DmaRxCh_Enable -Enables the DMAChannel_LDD component.
   - DmaRxCh_Disable -Disables the DMAChannel_LDD component.
   - DmaRxCh_EnableRequest -The method enables request from peripheral. Please note that this method doesn't start the transfer.
                The transfer is started as soon as DMA request from peripheral is asserted.
   - DmaRxCh_DisableRequest -The method disables DMA request from peripheral. Request can also by disabled automatically by the 
                DMA hardware if "<Disable request after transfer done>" property is set to "yes" value.
   - DmaRxCh_StartTransfer -The method starts DMA transfer on the selected DMA channel. This methods initiates explicit SW 
                transfer request. Please note that call of this method if peripheral request is enabled can cause unpredictable 
                behaviour.
   - DmaRxCh_GetError -Returns channel error flags and clears these flags.
   - DmaRxCh_SetSourceAddress -Sets source(read) transaction address.
   - DmaRxCh_SetDestinationAddress -Sets destination(write) transaction address.
   - DmaRxCh_SetTransactionCount -Sets number of R/W transaction performed after next request is asserted. Please note the this 
                value doesn't represent number of transferred bytes but number on R/W transaction units.
   - DmaRxCh_SetRequestCount -Sets number of requests required to complete transfer.

Module "DMA1"      (component DMAController)

Module "Cpu"       (component MK60DN512LQ10)

===================================================================================
